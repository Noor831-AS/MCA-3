import tkinter as tk
from tkinter import messagebox, filedialog
import os

class MyCodingAssistant:
    def __init__(self, root):
        self.root = root
        self.root.title("MY Coding Assistant (MCA)")
        self.root.geometry("600x400")
        self.root.resizable(False, False)

        # Title Label
        title_label = tk.Label(root, text="Welcome to MY Coding Assistant", font=("Arial", 16, "bold"))
        title_label.pack(pady=20)

        # Convert Code Button
        convert_button = tk.Button(root, text="Convert Code Between Languages", font=("Arial", 12), command=self.convert_code)
        convert_button.pack(pady=10)

        # Info Button
        info_button = tk.Button(root, text="Programming Language Info", font=("Arial", 12), command=self.show_info)
        info_button.pack(pady=10)

        # Simplify Download Button
        download_button = tk.Button(root, text="Simplify Download Process", font=("Arial", 12), command=self.simplify_download)
        download_button.pack(pady=10)

        # Streamline Tools Button
        streamline_button = tk.Button(root, text="Streamline Tools", font=("Arial", 12), command=self.streamline_tools)
        streamline_button.pack(pady=10)

        # Quit Button
        quit_button = tk.Button(root, text="Exit", font=("Arial", 12), command=root.quit)
        quit_button.pack(pady=20)

    def convert_code(self):
        \"\"\"Simulate converting code between programming languages.\"\"\"
        file_path = filedialog.askopenfilename(title="Select Code File", filetypes=(("Python Files", "*.py"), ("Text Files", "*.txt"), ("All Files", "*.*")))
        if not file_path:
            messagebox.showwarning("No File Selected", "Please select a file to convert.")
            return
        try:
            base, ext = os.path.splitext(file_path)
            converted_path = base + "_converted.txt"
            with open(converted_path, "w") as f:
                f.write(f"Converted code from {file_path}. This is a simulation.")
            messagebox.showinfo("Code Conversion", f"Code successfully converted! Saved as {converted_path}")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")

    def show_info(self):
        \"\"\"Show programming language information.\"\"\"
        info = (
            "Python: General-purpose, easy for beginners, versatile.\\n"
            "JavaScript: Used for web development, interactive front-end apps.\\n"
            "Java: Popular for large-scale applications and cross-platform use.\\n"
            "C++: Used for high-performance applications like games and systems.\\n"
        )
        messagebox.showinfo("Programming Language Info", info)

    def simplify_download(self):
        \"\"\"Simulate simplifying the download process.\"\"\"
        instructions = (
            "1. Go to the official website.\\n"
            "2. Select your operating system.\\n"
            "3. Click the 'Download' button.\\n"
            "4. Follow the installation wizard to complete setup.\\n"
        )
        messagebox.showinfo("Simplify Download Process", instructions)

    def streamline_tools(self):
        \"\"\"Simulate streamlining tools into one workflow.\"\"\"
        messagebox.showinfo("Streamline Tools", "All essential tools are unified into MCA for efficient work!")


if __name__ == "__main__":
    root = tk.Tk()
    app = MyCodingAssistant(root)
    root.mainloop()


